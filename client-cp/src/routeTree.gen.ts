/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as LogoutImport } from "./routes/logout";
import { Route as LoginImport } from "./routes/login";
import { Route as RoomIdImport } from "./routes/$roomId";

// Create Virtual Routes

const IndexLazyImport = createFileRoute("/")();

// Create/Update Routes

const LogoutRoute = LogoutImport.update({
	path: "/logout",
	getParentRoute: () => rootRoute,
} as any);

const LoginRoute = LoginImport.update({
	path: "/login",
	getParentRoute: () => rootRoute,
} as any);

const RoomIdRoute = RoomIdImport.update({
	path: "/$roomId",
	getParentRoute: () => rootRoute,
} as any);

const IndexLazyRoute = IndexLazyImport.update({
	path: "/",
	getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route));

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
	interface FileRoutesByPath {
		"/": {
			id: "/";
			path: "/";
			fullPath: "/";
			preLoaderRoute: typeof IndexLazyImport;
			parentRoute: typeof rootRoute;
		};
		"/$roomId": {
			id: "/$roomId";
			path: "/$roomId";
			fullPath: "/$roomId";
			preLoaderRoute: typeof RoomIdImport;
			parentRoute: typeof rootRoute;
		};
		"/login": {
			id: "/login";
			path: "/login";
			fullPath: "/login";
			preLoaderRoute: typeof LoginImport;
			parentRoute: typeof rootRoute;
		};
		"/logout": {
			id: "/logout";
			path: "/logout";
			fullPath: "/logout";
			preLoaderRoute: typeof LogoutImport;
			parentRoute: typeof rootRoute;
		};
	}
}

// Create and export the route tree

export interface FileRoutesByFullPath {
	"/": typeof IndexLazyRoute;
	"/$roomId": typeof RoomIdRoute;
	"/login": typeof LoginRoute;
	"/logout": typeof LogoutRoute;
}

export interface FileRoutesByTo {
	"/": typeof IndexLazyRoute;
	"/$roomId": typeof RoomIdRoute;
	"/login": typeof LoginRoute;
	"/logout": typeof LogoutRoute;
}

export interface FileRoutesById {
	__root__: typeof rootRoute;
	"/": typeof IndexLazyRoute;
	"/$roomId": typeof RoomIdRoute;
	"/login": typeof LoginRoute;
	"/logout": typeof LogoutRoute;
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths: "/" | "/$roomId" | "/login" | "/logout";
	fileRoutesByTo: FileRoutesByTo;
	to: "/" | "/$roomId" | "/login" | "/logout";
	id: "__root__" | "/" | "/$roomId" | "/login" | "/logout";
	fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
	IndexLazyRoute: typeof IndexLazyRoute;
	RoomIdRoute: typeof RoomIdRoute;
	LoginRoute: typeof LoginRoute;
	LogoutRoute: typeof LogoutRoute;
}

const rootRouteChildren: RootRouteChildren = {
	IndexLazyRoute: IndexLazyRoute,
	RoomIdRoute: RoomIdRoute,
	LoginRoute: LoginRoute,
	LogoutRoute: LogoutRoute,
};

export const routeTree = rootRoute
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>();

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$roomId",
        "/login",
        "/logout"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/$roomId": {
      "filePath": "$roomId.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/logout": {
      "filePath": "logout.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
